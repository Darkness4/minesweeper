plugins {
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'java'
}

group 'marc.nguyen'
version '1.0'

repositories {
    mavenCentral()
    jcenter()
}

test {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

apply from: rootProject.file('gradle/install-git-hooks.gradle')

dependencies {
    // Persistent Cache
    implementation 'org.xerial:sqlite-jdbc:3.32.3.2'

    // DI
    implementation 'com.google.dagger:dagger:2.29.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.29.1'
    implementation 'com.squareup.inject:assisted-inject-annotations-dagger2:0.5.2'
    annotationProcessor 'com.squareup.inject:assisted-inject-processor-dagger2:0.5.2'

    // Null safety annotation for documentation purpose
    implementation 'org.jetbrains:annotations:19.0.0'

    testImplementation 'org.mockito:mockito-core:3.5.10'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.5.10'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'marc.nguyen.minesweeper.server.Server'
}

task serverJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': 'marc.nguyen.minesweeper.server.Server'
        )
    }
    archiveClassifier.set("server")

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class')
}

task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'marc.nguyen.minesweeper.client.Client'
}

task clientJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': 'marc.nguyen.minesweeper.client.Client'
        )
    }
    archiveClassifier.set("client")

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class')
}