buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9"
    }
}

allprojects {
    group 'marc.nguyen'
    version '1.0'

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'

    compileJava {
        sourceCompatibility = '11'
        targetCompatibility = '11'
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        // Null safety annotation for documentation purpose
        implementation 'org.jetbrains:annotations:19.0.0'

        testImplementation 'org.mockito:mockito-core:3.5.10'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.5.10'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    }
}

apply from: rootProject.file('gradle/install-git-hooks.gradle')

task alljavadoc(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name $version API"
    options.author true
    options.addStringOption 'Xdoclint:none', '-quiet'

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

project(':app-server') {
    task exportJar(type: Copy, group: 'build') {
        from jar
        into "${rootProject.buildDir}/bin"
    }

    dependencies {
        implementation project(':app-common')
    }
}

project(':app-client') {
    task exportJar(type: Copy, group: 'build') {
        from jar
        into "${rootProject.buildDir}/bin"
    }

    dependencies {
        implementation project(':app-common')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}